@* Implementar spinner *@

@if(modal){
    <div class="backdrop-container"  >
        <div class="backdrop-inner ">
            <div class=btn-container>
                <button type="default" class="btn btn-danger" @onclick="closemodal">X</button>
            </div>
            <div class="content-container">
                <h3>@modaltitle</h3>
                <p>
                    @foreach (var (item, index) in TextReading.readlines(@modalpath).Select((value, i) => (value, i))){
                        @(item + " ")
                        if (item == ""){
                            <br/>
                            <br/>
                        }
                    }   
                </p>
            </div>
        </div>
    </div>
}

@page "/"

<PageTitle>Moogle</PageTitle>
<div id="main-container" style="margin: 25vh auto">

    <h1 class="maintitle">
        <span style="color: rgb(26,115,232)">M</span>
        <span style="color: rgb(224,63,44)">o</span>
        <span style="color: rgb(252,196,36)">o</span>
        <span style="color: rgb(26,115,232)">g</span>
        <span style="color: rgb(63,149,69)">l</span>
        <span style="color: rgb(224,63,44)">e</span>
    </h1>
    
    <div class="container-form">
        <input id="form-input"
                class="p-1 my-4" 
                @bind="query" 
                placeholder="Haz una búsqueda en Moogle ;)" 
                @onkeyup="@Enter"
                @oninput="@(e=> {query=(string)e.Value;})"
                >
        <span class="material-symbols-outlined"  
              @onclick="RunQuery"
              id="search-icon"
              >search</span>
        @if(query!=""){
            <span class="material-symbols-outlined"  
                @onclick="@(e => {query="";})"
                id="clear-icon"
                >close</span>
        }
        
    </div>
    
</div>


@if (!string.IsNullOrEmpty(result.Suggestion)) {
    <style>
        #main-container{
            margin: 0 !important;  
        }
        .maintitle{
            font-size: 4rem !important;
        }
    </style>
    <hr style="margin-top: -10px">
    <div class="suggestion">
        <p>¿Quisiste decir 
            <strong>
                <a class="suggestion-a" 
                   @onclick="@( e => {query= result.Suggestion; RunQuery();})" 
                   >@result.Suggestion</a>
            </strong>?
        </p>
    </div>
}

<div class="results">
@foreach (var item in result.Items()) {
    @if(item.Score!=0){

        <div class="container-item">
            <a class="item" @onclick="@(e => openmodal(item.Title, item.Path))" >
                <div >
                    <h3 class="title">@item.Title</h3>
                    <p>... @item.Snippet ...</p>
                </div>
            </a>
        </div>
    }
}
</div>

@if(result.Suggestion=="Moogle*"){
    <h4>Lo sentimos no se encontraron coincidecias :(</h4>
}

@code {
    [Inject] private IJSRuntime _js { get; set; }

    private string query = "";
    private bool modal= false;
    private string modalpath= "";
    private string modaltitle= "";
    
    private SearchResult result = new SearchResult();

    private void closemodal(){
        modal=false;
        modalpath="";
        modaltitle="";
    }
    private void openmodal(string a, string b){
        modal=true;
        modaltitle=a;
        modalpath = b;
    }
    private async Task RunQuery() {
        if(query!="")
            result = Moogle.Query(query);
        
        else
            await _js.InvokeAsync<bool>("SetFocusByElementId", "form-input");
    }

    public void Enter(KeyboardEventArgs e){
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            RunQuery();
    }   
}

